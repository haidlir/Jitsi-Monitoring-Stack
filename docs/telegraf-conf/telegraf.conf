# Global Agent Configuration
[agent]
  flush_interval = "15s"
  interval = "15s"

[global_tags]
  node = "<node-name>"

# CPU
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
  report_active = false

# Read metrics about memory usage
[[inputs.mem]]
  # no configuration

# Read metrics about disk usage
[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  # mount_points = ["/"]

  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

# HTTP/HTTPS request given an address a method and a timeout
[[inputs.http_response]]
  name_override = "jvb-health"
  ## List of urls to query.
  ## example of URL "http://meet.haidlir.id:8080/about/health"
  urls = [
    "http://localhost:8080/about/health",
  ]

  ## Set response_timeout (default 5 seconds)
  response_timeout = "5s"

  ## HTTP Request Method
  method = "GET"

[[inputs.http]]
  name_override = "jvb-stats"

  ## URL of each server in the service's cluster
  ## example of URL "http://meet.haidlir.id:8080/colibri/stats"
  urls = [
    "http://localhost:8080/colibri/stats",
  ]

  ## Set timeout (default 5 seconds)
  timeout = "5s"

  ## HTTP method to use: GET or POST (case-sensitive)
  method = "GET"
  data_format = "json"
  json_name_key = "jvb_stats"

  ## Time key is the key containing the time that should be used to create the
  ## metric.
  json_time_key = "current_timestamp"

  ## Time format is the time layout that should be used to interprete the json_time_key.
  ## The time must be `unix`, `unix_ms`, `unix_us`, `unix_ns`, or a time in the
  ## "reference time".  To define a different format, arrange the values from
  ## the "reference time" in the example to match the format you will be
  ## using.  For more information on the "reference time", visit
  ## https://golang.org/pkg/time/#Time.Format
  ##   ex: json_time_format = "Mon Jan 2 15:04:05 -0700 MST 2006"
  ##       json_time_format = "2006-01-02T15:04:05Z07:00"
  ##       json_time_format = "01/02/2006 15:04:05"
  ##       json_time_format = "unix"
  ##       json_time_format = "unix_ms"
  json_time_format = "2006-01-02 15:04:05.000"

  ## Timezone allows you to provide an override for timestamps that
  ## don't already include an offset
  ## e.g. 04/06/2016 12:41:45
  ##
  ## Default: "" which renders UTC
  ## Options are as follows:
  ##   1. Local               -- interpret based on machine localtime
  ##   2. "America/New_York"  -- Unix TZ values like those found in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  ##   3. UTC                 -- or blank/unspecified, will return timestamp in UTC
  json_timezone = "UTC"

  ## Tags to extract from top-level of JSON server response.
  tag_keys = [
    "version",
  ]

[[inputs.http]]
  name_override = "jicofo-stats"  ## URL of each server in the service's cluster
  ## example of URL "http://meet.haidlir.id:8080/colibri/stats"

  ## URL of each server in the service's cluster
  ## example of URL "http://meet.haidlir.id:8888/stats"
  urls = [
    "http://localhost:8888/stats",
  ]

  ## Set timeout (default 5 seconds)
  timeout = "5s"

  ## HTTP method to use: GET or POST (case-sensitive)
  method = "GET"
  data_format = "json"
  json_name_key = "jicofo_stats"

# Output Plugin InfluxDB
[[outputs.influxdb]]
  database = "jitsims_db"
  urls = [ "http://influxdb:8086" ]
  username = "jitsims"
  password = "changeme"
